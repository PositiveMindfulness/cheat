def cheat(which_exercise):
    """
    take one argument specifying which exercise of any previous Python assignment
    the user of your package wants to cheat on.
    """
    if which_exercise == "Q4":
        input = np.array([1, 2, 5, 6, 2, 2, 1, 6, 5, 7])
        def special(input):
            my_unique_values = []
            if (isinstance(input, np.ndarray) == False):
                raise Exception("The input is not a 'numpy vector'.")
            for i in input:
                if (not i in my_unique_values):
                    my_unique_values = np.append(my_unique_values, i)
                if (len(input) == len(my_unique_values)):
                    warnings.warn(" All values are special!")
            return my_unique_values
        uniq = special(input)
        print(uniq)
    elif which_exercise == "Q3":
        another_array = np.zeros((2, 4, 6))
        new_array = another_array.copy()
        # alternatively: new_array = np.copy(another_array)
        new_array[1, 2, 2] = 1
        print(f"another: '{another_array[1, 2, 2]}' vs. new: '{new_array[1, 2, 2]}'")
        # In Python, when using =, we only assign a reference to an object in memory,
        # so both new_array and another_array are pointing to the same memory
        # allocation, namely, the one created by np.zeros(). To make a true copy, you
        # can use the .copy() method or np.copy().
    elif which_exercise == "Q10":
        np.random.seed(1234)  # Set the random seed
        speed_sec = np.zeros(10)
        sim_speed = np.random.uniform(size=5)  # Speed simulation in seconds
        speed_sec[0:5] = sim_speed * np.random.uniform(low=0.5, high=10, size=5)
        speed_sec[5:10] = sim_speed
        language = np.repeat(np.array(['R', 'Python']), 5)
        code_type = np.char.add(np.array(['forloop'] * 5), np.arange(1, 6).astype(str))
        code_type = np.tile(code_type, 2)
        all_data = {"language": language,
                    "code_type": code_type,
                    "speed": speed_sec}
        my_data = pd.DataFrame(all_data)
        print(my_data)
    elif which_exercise == "Q2":
        another_array = np.zeros((2, 4, 6))
        # valid solution #1 - indexes the single element
        print(another_array[-1, 0, 2])
        # valid solution #2 - subsets the full dimension
        print(another_array[:, 0, :])
        print(another_array[:, :, 2])
        print(another_array[-1, :, :])
        # Generally, remember that Python (in contrast to R)
        #     - is zero-indexed (indices go from 0 to (n-1))
        #     - negative indices "invert" the access instead of deselection
        #     - you need to indicate fully indexed dimensions with a colon


# Testing the function:

cheat("Q10")
cheat("Q3")
cheat("Q2")
cheat("Q4")
